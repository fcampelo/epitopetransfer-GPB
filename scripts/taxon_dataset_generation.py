### This script takes peptides.csv, protein.csv, and taxonomy.csv as input.
### The higher-level datasets are generated by removing the lower-level ones.
### The lower-level datasets are also generated.
### The .fasta files are generated, and consistency checks are performed to ensure that the peptide sequences match their corresponding positions in the protein sequences.

import pandas as pd
import os
import re

# Function to remove specific taxons (lowest levels)
def remove_taxons(df_peptide: pd.DataFrame, df_protein: pd.DataFrame, taxon_list: list):
    proteins_to_remove = df_protein[df_protein["taxon_id"].isin(taxon_list)]["Info_protein_id"].tolist()
    filtered_peptides = df_peptide[~df_peptide["Info_protein_id"].isin(proteins_to_remove)]
    return filtered_peptides

# Function to keep only specific taxons (lower levels)
def keep_only_taxons(df_peptide: pd.DataFrame, df_protein: pd.DataFrame, taxon_list: list):
    proteins_to_keep = df_protein[df_protein["taxon_id"].isin(taxon_list)]["Info_protein_id"].tolist()
    filtered_peptides = df_peptide[df_peptide["Info_protein_id"].isin(proteins_to_keep)]
    return filtered_peptides

# Consistency check function
def check_consistency(df_peptide: pd.DataFrame, df_protein: pd.DataFrame):
    inconsistent_found = False
    for index, row in df_peptide.iterrows():
        protein_id = row["Info_protein_id"]
        seq = df_protein.loc[df_protein["Info_protein_id"] == protein_id, "Info_sequence"].values[0]
        start = row["Info_start_pos"] - 1
        end = row["Info_end_pos"]
        pepi = seq[start:end]
        if pepi != row["Info_peptide"]:
            print(f"Inconsistency found in protein {protein_id} at line {index}: expected {row['Info_peptide']}, found {pepi}")
            inconsistent_found = True

    if not inconsistent_found:
        print("All peptide sequences are consistent with their protein sequences.")
    else:
        print("Inconsistencies found in the dataset.")

# Generate .fasta files for proteins with or without label
def generate_fasta(df_protein: pd.DataFrame, df_peptide: pd.DataFrame, organism_name: str, peptide_type: str, output_dir: str):
    peptide_dir = os.path.join(output_dir, "peptides", organism_name)
    os.makedirs(peptide_dir, exist_ok=True)
    fasta_filename = os.path.join(peptide_dir, f"{peptide_type}_peptides.fasta")
    
    fasta_dict = {}
    for index, row in df_protein.iterrows():
        protein_id = row["Info_protein_id"]
        sequence = row["Info_sequence"]
        peptides = df_peptide[df_peptide["Info_protein_id"] == protein_id]

        # Writing each protein into the fasta file
        with open(fasta_filename, "a") as fasta_file:
            fasta_file.write(f">{protein_id}\n{sequence}\n")

        for _, peptide_row in peptides.iterrows():
            start_pos = peptide_row["Info_start_pos"]
            end_pos = peptide_row["Info_end_pos"]
            peptide_seq = sequence[start_pos - 1: end_pos]

            # Write each peptide to fasta
            fasta_dict[protein_id] = peptide_seq

    return fasta_dict

# Main function to create dataset for higher and lower levels
def generate_taxon_dataset(peptide_csv: str, protein_csv: str, taxonomy_csv: str, output_dir: str, higher_taxon: str, lower_taxons: list):
    df_peptide = pd.read_csv(peptide_csv)
    df_protein = pd.read_csv(protein_csv)
    df_taxonomy = pd.read_csv(taxonomy_csv)

    # Join taxonomy info with protein data
    df_protein = df_protein.merge(df_taxonomy, on="taxon_id")

    # Remove lower taxons from the dataset
    higher_level_data = remove_taxons(df_peptide, df_protein, lower_taxons)

    # Keep only lower taxons data
    lower_level_data = keep_only_taxons(df_peptide, df_protein, lower_taxons)

    # Perform consistency check before generating fasta files
    print("Checking consistency for higher-level dataset...")
    check_consistency(higher_level_data, df_protein)
    print("Checking consistency for lower-level dataset...")
    check_consistency(lower_level_data, df_protein)

    # Generate fasta files for both higher and lower levels
    generate_fasta(df_protein, higher_level_data, higher_taxon, "higher", output_dir)
    generate_fasta(df_protein, lower_level_data, higher_taxon, "lower", output_dir)

# Paths to input CSV files and output directory
peptide_csv = "./data/peptides.csv"
protein_csv = "./data/protein.csv"
taxonomy_csv = "./data/taxonomy.csv"
output_dir = "./output"

# Define taxons
higher_taxon = "Pseudomonadota"
lower_taxons = [562, 83333, 585034]  # Example lower taxon ids

# Generate datasets
generate_taxon_dataset(peptide_csv, protein_csv, taxonomy_csv, output_dir, higher_taxon, lower_taxons)
